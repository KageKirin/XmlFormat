using Superpower.Model;
using XmlFormat.SAX;

namespace SAX.TokenParser.Test;

public class XmlCharsParserTest
{
    [Theory]
    [InlineData("a")]
    [InlineData("b")]
    [InlineData("c")]
    [InlineData("d")]
    [InlineData("e")]
    [InlineData("f")]
    [InlineData("g")]
    [InlineData("h")]
    [InlineData("i")]
    [InlineData("j")]
    [InlineData("k")]
    [InlineData("l")]
    [InlineData("m")]
    [InlineData("n")]
    [InlineData("o")]
    [InlineData("p")]
    [InlineData("q")]
    [InlineData("r")]
    [InlineData("s")]
    [InlineData("t")]
    [InlineData("u")]
    [InlineData("v")]
    [InlineData("w")]
    [InlineData("x")]
    [InlineData("y")]
    [InlineData("z")]
    [InlineData("A")]
    [InlineData("B")]
    [InlineData("C")]
    [InlineData("D")]
    [InlineData("E")]
    [InlineData("F")]
    [InlineData("G")]
    [InlineData("H")]
    [InlineData("I")]
    [InlineData("J")]
    [InlineData("K")]
    [InlineData("L")]
    [InlineData("M")]
    [InlineData("N")]
    [InlineData("O")]
    [InlineData("P")]
    [InlineData("Q")]
    [InlineData("R")]
    [InlineData("S")]
    [InlineData("T")]
    [InlineData("U")]
    [InlineData("V")]
    [InlineData("W")]
    [InlineData("X")]
    [InlineData("Y")]
    [InlineData("Z")]
    [InlineData("0")]
    [InlineData("1")]
    [InlineData("2")]
    [InlineData("3")]
    [InlineData("4")]
    [InlineData("5")]
    [InlineData("6")]
    [InlineData("7")]
    [InlineData("8")]
    [InlineData("9")]
    [InlineData(":")]
    [InlineData("-")]
    [InlineData("_")]
    [InlineData("attribute")]
    [InlineData("element")]
    [InlineData("at-tribute")]
    [InlineData("el-ement")]
    [InlineData("at_tribute")]
    [InlineData("el_ement")]
    [InlineData("at:tribute")]
    [InlineData("el:ement")]
    [InlineData("at:tri_bute")]
    [InlineData("el:em_ent")]
    [InlineData("at-tri_bute")]
    [InlineData("el-em_ent")]
    [InlineData("at:tri-bute")]
    [InlineData("el:em-ent")]
    [InlineData("at:tri-but_e")]
    [InlineData("el:em-en_t")]
    [InlineData("attribute0")]
    [InlineData("element1")]
    public void TestXmlChars(string input)
    {
        var result = XmlTokenParser.XmlChars(new TextSpan(input));
        Console.WriteLine($"parsing: `{input}`\nresult: {result}");
        Assert.Null(result.ErrorMessage);
        Assert.True(result.HasValue);

        var chars = result.Value;
        Assert.NotEmpty(chars.ToStringValue());
        Assert.True(chars.EqualsValue(input));
    }

    [Theory]
    [InlineData("<")]
    [InlineData(">")]
    [InlineData("(")]
    [InlineData(")")]
    [InlineData("[")]
    [InlineData("]")]
    [InlineData("{")]
    [InlineData("}")]
    [InlineData(";")]
    [InlineData("?")]
    [InlineData(",")]
    [InlineData(".")]
    [InlineData("!")]
    [InlineData("+")]
    [InlineData("=")]
    [InlineData("@")]
    [InlineData("$")]
    [InlineData("%")]
    [InlineData("^")]
    [InlineData("&")]
    [InlineData("*")]
    [InlineData("'")]
    [InlineData("|")]
    [InlineData("\\")]
    [InlineData(" ")]
    [InlineData("\t")]
    [InlineData("\n")]
    void DisallowedCharacters(string input)
    {
        var result = XmlTokenParser.XmlChars(new TextSpan(input));
        Console.WriteLine($"parsing: `{input}`\nresult: {result}");
        Assert.False(result.HasValue);
    }
}
