<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Declare the pass to the MSBuild assembly as variable -->
  <PropertyGroup>
    <MsBuildAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildAssembly>
  </PropertyGroup>

  <!-- Select TaskFactory class depending on MSBuild version -->
  <PropertyGroup>
    <TaskFactory>CodeTaskFactory</TaskFactory>
    <TaskFactory Condition=" '$(MSBuildVersion.Substring(0,2))' >= 16 Or ('$(MSBuildVersion.Substring(0,2))' == 15 And '$(MSBuildVersion.Substring(3,1))' >= 8)">RoslynCodeTaskFactory</TaskFactory>
  </PropertyGroup>

  <!-- Enable task with `<XmlFormat>enable</XmlFormat>` || `<XmlFormat>true</XmlFormat>` -->
  <PropertyGroup Condition="'$(XmlFormat)' == 'enable' OR '$(XmlFormat)' == 'true'">
    <XmlFormatEnable>true</XmlFormatEnable>
  </PropertyGroup>

  <!-- Disable task with `<XmlFormat>disable</XmlFormat>` || `<XmlFormat>false</XmlFormat>` -->
  <PropertyGroup Condition="'$(XmlFormat)' == 'disable' OR '$(XmlFormat)' == 'false'">
    <XmlFormatEnable>false</XmlFormatEnable>
  </PropertyGroup>

  <!-- Task is off by default -->
  <PropertyGroup Condition="'$(XmlFormatEnable)' == ''">
    <XmlFormatEnable>false</XmlFormatEnable>
  </PropertyGroup>

  <!-- Task parameters default values -->
  <PropertyGroup>
    <XmlFormatLineLength Condition="'$(XmlFormatLineLength)' == ''">120</XmlFormatLineLength>
    <XmlFormatTabs Condition="'$(XmlFormatTabs)' == ''"> </XmlFormatTabs>
    <XmlFormatTabsRepeat Condition="'$(XmlFormatTabsRepeat)' == ''">2</XmlFormatTabsRepeat>
    <XmlFormatMaxEmptyLines Condition="'$(XmlFormatMaxEmptyLines)' == ''">1</XmlFormatMaxEmptyLines>
  </PropertyGroup>

  <UsingTask
    TaskName="InstallXmlFormatTool"
    TaskFactory="$(TaskFactory)"
    AssemblyFile="$(MsBuildAssembly)"
  >
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[
        Log.LogMessage(MessageImportance.High, "Formatting: Installing `xf`");

        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
            FileName = "dotnet",
            Arguments = "tool install -g KageKirin.XmlFormat.Tool",
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        process.Start();

        string output = process.StandardOutput.ReadToEnd();
        Console.WriteLine(output);

        process.WaitForExit();
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="DisplayXmlFormatToolHelp"
    TaskFactory="$(TaskFactory)"
    AssemblyFile="$(MsBuildAssembly)"
  >
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[
        Log.LogMessage(MessageImportance.High, "Formatting: Checking `xf` help");

        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
            FileName = "xf",
            Arguments = "--help",
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        process.Start();

        string output = process.StandardOutput.ReadToEnd();
        Console.WriteLine(output);

        process.WaitForExit();
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="DisplayXmlFormatToolVersion"
    TaskFactory="$(TaskFactory)"
    AssemblyFile="$(MsBuildAssembly)"
  >
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[
        Log.LogMessage(MessageImportance.High, "Formatting: Checking `xf` version");

        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
            FileName = "xf",
            Arguments = "--version",
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        process.Start();

        string output = process.StandardOutput.ReadToEnd();
        Console.WriteLine(output);

        process.WaitForExit();
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="RunXmlFormatFiles"
    TaskFactory="$(TaskFactory)"
    AssemblyFile="$(MsBuildAssembly)"
  >
    <ParameterGroup>
      <LineLength ParameterType="System.Int32" Required="false" />
      <Tabs ParameterType="System.String" Required="false" />
      <TabsRepeat ParameterType="System.Int32" Required="false" />
      <MaxEmptyLines ParameterType="System.Int32" Required="false" />
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>

    <Task>

      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[
        Log.LogMessage(MessageImportance.High, "Formatting: Running `xf`");

        string formatParam = string.Empty;

        if (LineLength > 0)
        {
          formatParam = $"/LineLength={LineLength}";
        }

        if (Tabs is not null)
        {
          formatParam += (string.IsNullOrEmpty(formatParam) ? "" : ";");
          formatParam += $"/Tabs='{Tabs}'";
        }

        if (TabsRepeat > 0)
        {
          formatParam += (string.IsNullOrEmpty(formatParam) ? "" : ";");
          formatParam += $"/TabsRepeat={TabsRepeat}";
        }

        if (MaxEmptyLines > 0)
        {
          formatParam += (string.IsNullOrEmpty(formatParam) ? "" : ";");
          formatParam += $"/MaxEmptyLines={MaxEmptyLines}";
        }

        string files = string.Join(" ", Files.Select(f => f.ItemSpec));
        string arguments = $"--inline --format \"{formatParam}\" {files}";
        Log.LogMessage(MessageImportance.High, "Formatting: Running `xf {arguments}`");

        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
            FileName = "xf",
            Arguments = arguments,
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        process.Start();

        string output = process.StandardOutput.ReadToEnd();
        Console.WriteLine(output);

        process.WaitForExit();
      ]]>
      </Code>
    </Task>
  </UsingTask>


  <Target Name="FormatXmlFiles"
          BeforeTargets="CoreCompile"
          Condition="'$(XmlFormatEnable)' == 'true' AND @(XmlFormatFile->Count()) > 0">

    <Message Importance="high" Text="Formatting @(XmlFormatFile->Count()) XML file(s)..." />
    <Message Importance="high" Text="Formatting @(XmlFormatFile)" />
    <Message Importance="high" Text="Formatting %(XmlFormatFile.FullPath)" />
    <Message Importance="high" Text="Formatting config $(XmlFormatConfig)" />

    <!-- install xf -->
    <InstallXmlFormatTool />

    <!-- run xf help -->
    <DisplayXmlFormatToolHelp />

    <!-- run xf version -->
    <DisplayXmlFormatToolVersion />

    <!-- run xf -->
    <RunXmlFormatFiles
      LineLength="$(XmlFormatLineLength)"
      Tabs="$(XmlFormatTabs)"
      TabsRepeat="$(XmlFormatTabsRepeat)"
      MaxEmptyLines="$(XmlFormatMaxEmptyLines)"
      Files="@(XmlFormatFile)"
    />

  </Target>
</Project>
